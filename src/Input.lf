target Python

reactor Microphone(buffer_size=15600, sample_rate=16000, channels=1) {
    physical action send_audio_data
    output audio_data
  
    state audio_capture_thread
    state thread_should_be_running
  
    preamble {=
      import time as tm
      import sounddevice as sd
      import numpy as np
      import threading
  
      def audio_capture(self, audio_action, running):
  
          def callback(indata, frames, time, status):
              if status:
                  print(status)
                  
              input_data = indata.astype(self.np.float32)
              audio_action.schedule(0, input_data)
  
          with self.sd.InputStream(channels=self.channels, samplerate=self.sample_rate, callback=callback, blocksize=self.buffer_size) as stream:
              print("#" * 50)
              print("Recording started. Press Enter to stop")
              print("#" * 50)
              input()
              print("\nRecording stopped")
              stream.close()
          request_stop()
    =}
  
    reaction(startup) -> send_audio_data {=
      # Launch Audio Capture Thread
      self.thread_should_be_running = self.threading.Event()
      self.thread_should_be_running.set()
  
      self.audio_capture_thread = self.threading.Thread(target=self.audio_capture, args=(send_audio_data, self.thread_should_be_running))
      self.audio_capture_thread.start()
    =}
  
    reaction(send_audio_data) -> audio_data {=
      audio_data.set(send_audio_data.value)
    =}
  
    reaction(shutdown) {=
      self.thread_should_be_running.clear()
      self.audio_capture_thread.join(0.1)
      print("Shutting down Microphone reactor")
    =}
  }