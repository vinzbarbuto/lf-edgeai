/**
 * @file SimpleObjectDetection.lf
 * @author Vincenzo Barbuto
 * @brief Examples of how to use the Object Detection reactor.
 */
target Python

import ObjectDetector from "../lib/ComputerVision.lf"

/**
 * @brief Defines an ImageInjector reactor that reads an image from a file path and outputs the
 * image data. The image path is specified as a parameter to the ImageInjector reactor.
 *
 * The Actuator reactor takes the detection results and inference time as inputs, and prints the
 * results. It prints the detection results along with their detection box, indices, class name and,
 * confidence scores. It also prints the time taken for each inference in milliseconds.
 *
 * The main reactor wires up the `ImageInjector`, `ObjectDetector`, and `Actuator` reactors
 * together. The ImageInjector reactor outputs the image data to the ObjectDetector reactor. The
 * ObjectDetector reactor outputs the detection results and inference time to the Actuator
 * reactor.
 *
 * @note Remember to set the `model` parameter to the absolute path of the obect detection model you
 * want to use, as well as the `img_path` parameter to the absolute path of the image file you want
 * to use.
 */
reactor ImageInjector(img_path="") {
  output image_data

  preamble {=
    import cv2
  =}

  reaction(startup) -> image_data {=
    img = self.cv2.imread(self.img_path)
    image_data.set(img)
  =}
}

reactor Actuator {
  input res
  input inference_time

  reaction(res, inference_time) {=
    results = res.value
    print("-"*70)
    for i, result in enumerate(results):
        print(f"{i}) Box: {result['box']}; Index: {result['index']}; Class: {result['label']}; Confidence: {result['score']*100:.2f}%")
    print(f"Time per inference: {inference_time.value} ms")
  =}
}

main reactor {
  inj = new ImageInjector(img_path="/path/to/image.png")
  obj = new ObjectDetector(model="/path/to/model.tflite")
  actuator = new Actuator()
  inj.image_data -> obj.input_data
  obj.results, obj.inference_time -> actuator.res, actuator.inference_time
}
