target Python

reactor AudioClassifier(model_path="", labels_file="", output_index=0) {
    state interpreter;
    state input_details;
    state output_details;
    state labels;

    input input_data;
    output label;
    output confidence;
    output inference_time;

    preamble {=
        import tensorflow as tf
        import os
        import numpy as np
    =}

    reaction(startup) {=
        if(self.model_path == ""):
            print("Error: Please provide a valid model path")
            request_stop()
        elif(self.labels_file == ""):
            print("Error: Please provide a valid labels file")
            request_stop()
        else:
            # Load model
            print(f"Loading model from: {self.model_path}")
            self.interpreter = self.tf.lite.Interpreter(model_path=self.model_path)
            self.interpreter.allocate_tensors()
            self.input_details = self.interpreter.get_input_details()
            self.output_details = self.interpreter.get_output_details()
            # Load labels
            self.labels = self.np.genfromtxt(self.labels_file, dtype=str, delimiter="\n")
    =}

    reaction(input_data) -> label, inference_time, confidence {=
        # Run inference
        self.interpreter.set_tensor(self.input_details[0]["index"], input_data.value[0])
        start = lf.time.physical()
        self.interpreter.invoke()
        inference_tm = lf.time.physical() - start
        # Get output results
        results = self.interpreter.get_tensor(self.output_details[self.output_index]["index"])
        result_index = results.argmax()
        label.set(self.labels[result_index])
        inference_time.set(inference_tm)
        confidence.set(format(results[0][result_index]*100, ".2f"))
    =}

    reaction(shutdown) {=
        print("Shutting down AudioClassifier reactor")
    =}

}